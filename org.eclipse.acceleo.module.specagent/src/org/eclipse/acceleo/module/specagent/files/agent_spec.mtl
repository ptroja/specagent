[comment encoding = UTF-8 /]
[module agent_spec('http://multirobotsystem/1.0')/]
[import utils/]

[template public agent_spec(anAgent : Agent)]
	
[comment @main /]
[file ('agent_'+anAgent.name+'.ads', false, 'UTF-8')]
with Agent_[anAgent.name/]_Buffers; use Agent_[anAgent.name/]_Buffers;

package Agent_[anAgent.name/] is
   -- This is remote interface to the agent
   pragma Remote_Call_Interface;

   -- remote access to the input buffers
   [if effector->notEmpty()]
   package effector_[effector.name/] is
      [for (aInputBuffer : InputBuffer | effector.inputs)]
      package [aInputBuffer.name/] is
         procedure Send(item : in Effector_[anAgent.effector.name/]_t.[aInputBuffer.name/]_t.DataType);
      end [aInputBuffer.name/];
      [/for]
   end effector_[effector.name/];
   [/if]

   [for (aSensor : Sensor | sensors)]
   package sensor_[aSensor.name/] is
      [for (aInputBuffer : InputBuffer | aSensor.inputs)]
      package [aInputBuffer.name/] is
         procedure Send(item : in Sensor_[aSensor.name/]_t.[aInputBuffer.name/]_t.DataType);
      end [aInputBuffer.name/];
      [/for]
   end sensor_[aSensor.name/];
   [/for]

   [for (aTransmitter : Transmitter | transmitters)]
   package transmitter_[aTransmitter.name/] is
      [for (aInputBuffer : InputBuffer | aTransmitter.inputs)]
      package [aInputBuffer.name/] is
         procedure Send(item : in Transmitter_[aTransmitter.name/]_t.[aInputBuffer.name/]_t.DataType);
      end [aInputBuffer.name/];
      [/for]
   end transmitter_[aTransmitter.name/];
   [/for]

private
   [if hasInputBuffers(anAgent)] 
   -- Buffer identifiers
   type buffer_id is (
   [for (buffer : InputBuffer | allInputBuffers(anAgent)) separator (',\n') after('\n') ]
      [bufferId(buffer)/][/for]
   );

   -- Status of the particular buffers
   type fresh_status_t is array (buffer_id) of Boolean;
   [/if]
end Agent_[anAgent.name/];
[/file]
	
[/template]
